// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v3election.proto

#include "v3election.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace v3electionpb {
class CampaignRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CampaignRequest>
      _instance;
} _CampaignRequest_default_instance_;
class CampaignResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CampaignResponse>
      _instance;
} _CampaignResponse_default_instance_;
class LeaderKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderKey>
      _instance;
} _LeaderKey_default_instance_;
class LeaderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderRequest>
      _instance;
} _LeaderRequest_default_instance_;
class LeaderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderResponse>
      _instance;
} _LeaderResponse_default_instance_;
class ResignRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResignRequest>
      _instance;
} _ResignRequest_default_instance_;
class ResignResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResignResponse>
      _instance;
} _ResignResponse_default_instance_;
class ProclaimRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProclaimRequest>
      _instance;
} _ProclaimRequest_default_instance_;
class ProclaimResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProclaimResponse>
      _instance;
} _ProclaimResponse_default_instance_;
}  // namespace v3electionpb
namespace protobuf_v3election_2eproto {
void InitDefaultsCampaignRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::v3electionpb::_CampaignRequest_default_instance_;
    new (ptr) ::v3electionpb::CampaignRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::CampaignRequest::InitAsDefaultInstance();
}

void InitDefaultsCampaignRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCampaignRequestImpl);
}

void InitDefaultsCampaignResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_rpc_2eproto::InitDefaultsResponseHeader();
  protobuf_v3election_2eproto::InitDefaultsLeaderKey();
  {
    void* ptr = &::v3electionpb::_CampaignResponse_default_instance_;
    new (ptr) ::v3electionpb::CampaignResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::CampaignResponse::InitAsDefaultInstance();
}

void InitDefaultsCampaignResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCampaignResponseImpl);
}

void InitDefaultsLeaderKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::v3electionpb::_LeaderKey_default_instance_;
    new (ptr) ::v3electionpb::LeaderKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::LeaderKey::InitAsDefaultInstance();
}

void InitDefaultsLeaderKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeaderKeyImpl);
}

void InitDefaultsLeaderRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::v3electionpb::_LeaderRequest_default_instance_;
    new (ptr) ::v3electionpb::LeaderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::LeaderRequest::InitAsDefaultInstance();
}

void InitDefaultsLeaderRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeaderRequestImpl);
}

void InitDefaultsLeaderResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_rpc_2eproto::InitDefaultsResponseHeader();
  protobuf_kv_2eproto::InitDefaultsKeyValue();
  {
    void* ptr = &::v3electionpb::_LeaderResponse_default_instance_;
    new (ptr) ::v3electionpb::LeaderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::LeaderResponse::InitAsDefaultInstance();
}

void InitDefaultsLeaderResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeaderResponseImpl);
}

void InitDefaultsResignRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_v3election_2eproto::InitDefaultsLeaderKey();
  {
    void* ptr = &::v3electionpb::_ResignRequest_default_instance_;
    new (ptr) ::v3electionpb::ResignRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::ResignRequest::InitAsDefaultInstance();
}

void InitDefaultsResignRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResignRequestImpl);
}

void InitDefaultsResignResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_rpc_2eproto::InitDefaultsResponseHeader();
  {
    void* ptr = &::v3electionpb::_ResignResponse_default_instance_;
    new (ptr) ::v3electionpb::ResignResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::ResignResponse::InitAsDefaultInstance();
}

void InitDefaultsResignResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResignResponseImpl);
}

void InitDefaultsProclaimRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_v3election_2eproto::InitDefaultsLeaderKey();
  {
    void* ptr = &::v3electionpb::_ProclaimRequest_default_instance_;
    new (ptr) ::v3electionpb::ProclaimRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::ProclaimRequest::InitAsDefaultInstance();
}

void InitDefaultsProclaimRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProclaimRequestImpl);
}

void InitDefaultsProclaimResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_rpc_2eproto::InitDefaultsResponseHeader();
  {
    void* ptr = &::v3electionpb::_ProclaimResponse_default_instance_;
    new (ptr) ::v3electionpb::ProclaimResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v3electionpb::ProclaimResponse::InitAsDefaultInstance();
}

void InitDefaultsProclaimResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProclaimResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::CampaignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::CampaignRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::CampaignRequest, lease_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::CampaignRequest, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::CampaignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::CampaignResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::CampaignResponse, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderKey, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderKey, rev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderKey, lease_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::LeaderResponse, kv_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::ResignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::ResignRequest, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::ResignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::ResignResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::ProclaimRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::ProclaimRequest, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::ProclaimRequest, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::ProclaimResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v3electionpb::ProclaimResponse, header_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v3electionpb::CampaignRequest)},
  { 8, -1, sizeof(::v3electionpb::CampaignResponse)},
  { 15, -1, sizeof(::v3electionpb::LeaderKey)},
  { 24, -1, sizeof(::v3electionpb::LeaderRequest)},
  { 30, -1, sizeof(::v3electionpb::LeaderResponse)},
  { 37, -1, sizeof(::v3electionpb::ResignRequest)},
  { 43, -1, sizeof(::v3electionpb::ResignResponse)},
  { 49, -1, sizeof(::v3electionpb::ProclaimRequest)},
  { 56, -1, sizeof(::v3electionpb::ProclaimResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_CampaignRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_CampaignResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_LeaderKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_LeaderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_LeaderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_ResignRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_ResignResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_ProclaimRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v3electionpb::_ProclaimResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "v3election.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020v3election.proto\022\014v3electionpb\032\trpc.pr"
      "oto\032\010kv.proto\"=\n\017CampaignRequest\022\014\n\004name"
      "\030\001 \001(\014\022\r\n\005lease\030\002 \001(\003\022\r\n\005value\030\003 \001(\014\"i\n\020"
      "CampaignResponse\022,\n\006header\030\001 \001(\0132\034.etcds"
      "erverpb.ResponseHeader\022\'\n\006leader\030\002 \001(\0132\027"
      ".v3electionpb.LeaderKey\"B\n\tLeaderKey\022\014\n\004"
      "name\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\022\013\n\003rev\030\003 \001(\003\022\r\n\005"
      "lease\030\004 \001(\003\"\035\n\rLeaderRequest\022\014\n\004name\030\001 \001"
      "(\014\"\\\n\016LeaderResponse\022,\n\006header\030\001 \001(\0132\034.e"
      "tcdserverpb.ResponseHeader\022\034\n\002kv\030\002 \001(\0132\020"
      ".mvccpb.KeyValue\"8\n\rResignRequest\022\'\n\006lea"
      "der\030\001 \001(\0132\027.v3electionpb.LeaderKey\">\n\016Re"
      "signResponse\022,\n\006header\030\001 \001(\0132\034.etcdserve"
      "rpb.ResponseHeader\"I\n\017ProclaimRequest\022\'\n"
      "\006leader\030\001 \001(\0132\027.v3electionpb.LeaderKey\022\r"
      "\n\005value\030\002 \001(\014\"@\n\020ProclaimResponse\022,\n\006hea"
      "der\030\001 \001(\0132\034.etcdserverpb.ResponseHeader2"
      "\374\002\n\010Election\022K\n\010Campaign\022\035.v3electionpb."
      "CampaignRequest\032\036.v3electionpb.CampaignR"
      "esponse\"\000\022K\n\010Proclaim\022\035.v3electionpb.Pro"
      "claimRequest\032\036.v3electionpb.ProclaimResp"
      "onse\"\000\022E\n\006Leader\022\033.v3electionpb.LeaderRe"
      "quest\032\034.v3electionpb.LeaderResponse\"\000\022H\n"
      "\007Observe\022\033.v3electionpb.LeaderRequest\032\034."
      "v3electionpb.LeaderResponse\"\0000\001\022E\n\006Resig"
      "n\022\033.v3electionpb.ResignRequest\032\034.v3elect"
      "ionpb.ResignResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1070);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "v3election.proto", &protobuf_RegisterTypes);
  ::protobuf_rpc_2eproto::AddDescriptors();
  ::protobuf_kv_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_v3election_2eproto
namespace v3electionpb {

// ===================================================================

void CampaignRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CampaignRequest::kNameFieldNumber;
const int CampaignRequest::kLeaseFieldNumber;
const int CampaignRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CampaignRequest::CampaignRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_v3election_2eproto::InitDefaultsCampaignRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.CampaignRequest)
}
CampaignRequest::CampaignRequest(const CampaignRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  lease_ = from.lease_;
  // @@protoc_insertion_point(copy_constructor:v3electionpb.CampaignRequest)
}

void CampaignRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lease_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CampaignRequest::~CampaignRequest() {
  // @@protoc_insertion_point(destructor:v3electionpb.CampaignRequest)
  SharedDtor();
}

void CampaignRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CampaignRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampaignRequest::descriptor() {
  ::protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CampaignRequest& CampaignRequest::default_instance() {
  ::protobuf_v3election_2eproto::InitDefaultsCampaignRequest();
  return *internal_default_instance();
}

CampaignRequest* CampaignRequest::New(::google::protobuf::Arena* arena) const {
  CampaignRequest* n = new CampaignRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CampaignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.CampaignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lease_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool CampaignRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.CampaignRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lease = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lease_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.CampaignRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.CampaignRequest)
  return false;
#undef DO_
}

void CampaignRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.CampaignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // int64 lease = 2;
  if (this->lease() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lease(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.CampaignRequest)
}

::google::protobuf::uint8* CampaignRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.CampaignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // int64 lease = 2;
  if (this->lease() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lease(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.CampaignRequest)
  return target;
}

size_t CampaignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.CampaignRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int64 lease = 2;
  if (this->lease() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lease());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampaignRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.CampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CampaignRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CampaignRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.CampaignRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.CampaignRequest)
    MergeFrom(*source);
  }
}

void CampaignRequest::MergeFrom(const CampaignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.CampaignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.lease() != 0) {
    set_lease(from.lease());
  }
}

void CampaignRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.CampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampaignRequest::CopyFrom(const CampaignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.CampaignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampaignRequest::IsInitialized() const {
  return true;
}

void CampaignRequest::Swap(CampaignRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CampaignRequest::InternalSwap(CampaignRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(lease_, other->lease_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CampaignRequest::GetMetadata() const {
  protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CampaignResponse::InitAsDefaultInstance() {
  ::v3electionpb::_CampaignResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  ::v3electionpb::_CampaignResponse_default_instance_._instance.get_mutable()->leader_ = const_cast< ::v3electionpb::LeaderKey*>(
      ::v3electionpb::LeaderKey::internal_default_instance());
}
void CampaignResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CampaignResponse::kHeaderFieldNumber;
const int CampaignResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CampaignResponse::CampaignResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_v3election_2eproto::InitDefaultsCampaignResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.CampaignResponse)
}
CampaignResponse::CampaignResponse(const CampaignResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_leader()) {
    leader_ = new ::v3electionpb::LeaderKey(*from.leader_);
  } else {
    leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.CampaignResponse)
}

void CampaignResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) -
      reinterpret_cast<char*>(&header_)) + sizeof(leader_));
  _cached_size_ = 0;
}

CampaignResponse::~CampaignResponse() {
  // @@protoc_insertion_point(destructor:v3electionpb.CampaignResponse)
  SharedDtor();
}

void CampaignResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete leader_;
}

void CampaignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampaignResponse::descriptor() {
  ::protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CampaignResponse& CampaignResponse::default_instance() {
  ::protobuf_v3election_2eproto::InitDefaultsCampaignResponse();
  return *internal_default_instance();
}

CampaignResponse* CampaignResponse::New(::google::protobuf::Arena* arena) const {
  CampaignResponse* n = new CampaignResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.CampaignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  _internal_metadata_.Clear();
}

bool CampaignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.CampaignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .v3electionpb.LeaderKey leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.CampaignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.CampaignResponse)
  return false;
#undef DO_
}

void CampaignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.CampaignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .v3electionpb.LeaderKey leader = 2;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leader_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.CampaignResponse)
}

::google::protobuf::uint8* CampaignResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.CampaignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .v3electionpb.LeaderKey leader = 2;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->leader_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.CampaignResponse)
  return target;
}

size_t CampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.CampaignResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .v3electionpb.LeaderKey leader = 2;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampaignResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.CampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CampaignResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CampaignResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.CampaignResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.CampaignResponse)
    MergeFrom(*source);
  }
}

void CampaignResponse::MergeFrom(const CampaignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.CampaignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_leader()) {
    mutable_leader()->::v3electionpb::LeaderKey::MergeFrom(from.leader());
  }
}

void CampaignResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.CampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampaignResponse::CopyFrom(const CampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.CampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampaignResponse::IsInitialized() const {
  return true;
}

void CampaignResponse::Swap(CampaignResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CampaignResponse::InternalSwap(CampaignResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CampaignResponse::GetMetadata() const {
  protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderKey::kNameFieldNumber;
const int LeaderKey::kKeyFieldNumber;
const int LeaderKey::kRevFieldNumber;
const int LeaderKey::kLeaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderKey::LeaderKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_v3election_2eproto::InitDefaultsLeaderKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.LeaderKey)
}
LeaderKey::LeaderKey(const LeaderKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&rev_, &from.rev_,
    static_cast<size_t>(reinterpret_cast<char*>(&lease_) -
    reinterpret_cast<char*>(&rev_)) + sizeof(lease_));
  // @@protoc_insertion_point(copy_constructor:v3electionpb.LeaderKey)
}

void LeaderKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&rev_)) + sizeof(lease_));
  _cached_size_ = 0;
}

LeaderKey::~LeaderKey() {
  // @@protoc_insertion_point(destructor:v3electionpb.LeaderKey)
  SharedDtor();
}

void LeaderKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeaderKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderKey::descriptor() {
  ::protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderKey& LeaderKey::default_instance() {
  ::protobuf_v3election_2eproto::InitDefaultsLeaderKey();
  return *internal_default_instance();
}

LeaderKey* LeaderKey::New(::google::protobuf::Arena* arena) const {
  LeaderKey* n = new LeaderKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaderKey::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.LeaderKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&rev_)) + sizeof(lease_));
  _internal_metadata_.Clear();
}

bool LeaderKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.LeaderKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rev = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lease = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lease_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.LeaderKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.LeaderKey)
  return false;
#undef DO_
}

void LeaderKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.LeaderKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // int64 rev = 3;
  if (this->rev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rev(), output);
  }

  // int64 lease = 4;
  if (this->lease() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lease(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.LeaderKey)
}

::google::protobuf::uint8* LeaderKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.LeaderKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // int64 rev = 3;
  if (this->rev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rev(), target);
  }

  // int64 lease = 4;
  if (this->lease() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lease(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.LeaderKey)
  return target;
}

size_t LeaderKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.LeaderKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // int64 rev = 3;
  if (this->rev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rev());
  }

  // int64 lease = 4;
  if (this->lease() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lease());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.LeaderKey)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.LeaderKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.LeaderKey)
    MergeFrom(*source);
  }
}

void LeaderKey::MergeFrom(const LeaderKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.LeaderKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.rev() != 0) {
    set_rev(from.rev());
  }
  if (from.lease() != 0) {
    set_lease(from.lease());
  }
}

void LeaderKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.LeaderKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderKey::CopyFrom(const LeaderKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.LeaderKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderKey::IsInitialized() const {
  return true;
}

void LeaderKey::Swap(LeaderKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderKey::InternalSwap(LeaderKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  key_.Swap(&other->key_);
  swap(rev_, other->rev_);
  swap(lease_, other->lease_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaderKey::GetMetadata() const {
  protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderRequest::LeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_v3election_2eproto::InitDefaultsLeaderRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.LeaderRequest)
}
LeaderRequest::LeaderRequest(const LeaderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.LeaderRequest)
}

void LeaderRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LeaderRequest::~LeaderRequest() {
  // @@protoc_insertion_point(destructor:v3electionpb.LeaderRequest)
  SharedDtor();
}

void LeaderRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderRequest::descriptor() {
  ::protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderRequest& LeaderRequest::default_instance() {
  ::protobuf_v3election_2eproto::InitDefaultsLeaderRequest();
  return *internal_default_instance();
}

LeaderRequest* LeaderRequest::New(::google::protobuf::Arena* arena) const {
  LeaderRequest* n = new LeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.LeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.LeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.LeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.LeaderRequest)
  return false;
#undef DO_
}

void LeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.LeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.LeaderRequest)
}

::google::protobuf::uint8* LeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.LeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.LeaderRequest)
  return target;
}

size_t LeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.LeaderRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.LeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.LeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.LeaderRequest)
    MergeFrom(*source);
  }
}

void LeaderRequest::MergeFrom(const LeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.LeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void LeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.LeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderRequest::CopyFrom(const LeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.LeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderRequest::IsInitialized() const {
  return true;
}

void LeaderRequest::Swap(LeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderRequest::InternalSwap(LeaderRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaderRequest::GetMetadata() const {
  protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderResponse::InitAsDefaultInstance() {
  ::v3electionpb::_LeaderResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  ::v3electionpb::_LeaderResponse_default_instance_._instance.get_mutable()->kv_ = const_cast< ::mvccpb::KeyValue*>(
      ::mvccpb::KeyValue::internal_default_instance());
}
void LeaderResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void LeaderResponse::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) {
    delete kv_;
  }
  kv_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderResponse::kHeaderFieldNumber;
const int LeaderResponse::kKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderResponse::LeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_v3election_2eproto::InitDefaultsLeaderResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.LeaderResponse)
}
LeaderResponse::LeaderResponse(const LeaderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_kv()) {
    kv_ = new ::mvccpb::KeyValue(*from.kv_);
  } else {
    kv_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.LeaderResponse)
}

void LeaderResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kv_) -
      reinterpret_cast<char*>(&header_)) + sizeof(kv_));
  _cached_size_ = 0;
}

LeaderResponse::~LeaderResponse() {
  // @@protoc_insertion_point(destructor:v3electionpb.LeaderResponse)
  SharedDtor();
}

void LeaderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete kv_;
}

void LeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderResponse::descriptor() {
  ::protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderResponse& LeaderResponse::default_instance() {
  ::protobuf_v3election_2eproto::InitDefaultsLeaderResponse();
  return *internal_default_instance();
}

LeaderResponse* LeaderResponse::New(::google::protobuf::Arena* arena) const {
  LeaderResponse* n = new LeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.LeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) {
    delete kv_;
  }
  kv_ = NULL;
  _internal_metadata_.Clear();
}

bool LeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.LeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mvccpb.KeyValue kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.LeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.LeaderResponse)
  return false;
#undef DO_
}

void LeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.LeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .mvccpb.KeyValue kv = 2;
  if (this->has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->kv_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.LeaderResponse)
}

::google::protobuf::uint8* LeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.LeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .mvccpb.KeyValue kv = 2;
  if (this->has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->kv_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.LeaderResponse)
  return target;
}

size_t LeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.LeaderResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .mvccpb.KeyValue kv = 2;
  if (this->has_kv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->kv_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.LeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.LeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.LeaderResponse)
    MergeFrom(*source);
  }
}

void LeaderResponse::MergeFrom(const LeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.LeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_kv()) {
    mutable_kv()->::mvccpb::KeyValue::MergeFrom(from.kv());
  }
}

void LeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.LeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderResponse::CopyFrom(const LeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.LeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderResponse::IsInitialized() const {
  return true;
}

void LeaderResponse::Swap(LeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderResponse::InternalSwap(LeaderResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(kv_, other->kv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaderResponse::GetMetadata() const {
  protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResignRequest::InitAsDefaultInstance() {
  ::v3electionpb::_ResignRequest_default_instance_._instance.get_mutable()->leader_ = const_cast< ::v3electionpb::LeaderKey*>(
      ::v3electionpb::LeaderKey::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResignRequest::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResignRequest::ResignRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_v3election_2eproto::InitDefaultsResignRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.ResignRequest)
}
ResignRequest::ResignRequest(const ResignRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leader()) {
    leader_ = new ::v3electionpb::LeaderKey(*from.leader_);
  } else {
    leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.ResignRequest)
}

void ResignRequest::SharedCtor() {
  leader_ = NULL;
  _cached_size_ = 0;
}

ResignRequest::~ResignRequest() {
  // @@protoc_insertion_point(destructor:v3electionpb.ResignRequest)
  SharedDtor();
}

void ResignRequest::SharedDtor() {
  if (this != internal_default_instance()) delete leader_;
}

void ResignRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResignRequest::descriptor() {
  ::protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResignRequest& ResignRequest::default_instance() {
  ::protobuf_v3election_2eproto::InitDefaultsResignRequest();
  return *internal_default_instance();
}

ResignRequest* ResignRequest::New(::google::protobuf::Arena* arena) const {
  ResignRequest* n = new ResignRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.ResignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  _internal_metadata_.Clear();
}

bool ResignRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.ResignRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .v3electionpb.LeaderKey leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.ResignRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.ResignRequest)
  return false;
#undef DO_
}

void ResignRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.ResignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->leader_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.ResignRequest)
}

::google::protobuf::uint8* ResignRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.ResignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->leader_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.ResignRequest)
  return target;
}

size_t ResignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.ResignRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResignRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.ResignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResignRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResignRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.ResignRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.ResignRequest)
    MergeFrom(*source);
  }
}

void ResignRequest::MergeFrom(const ResignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.ResignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leader()) {
    mutable_leader()->::v3electionpb::LeaderKey::MergeFrom(from.leader());
  }
}

void ResignRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.ResignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResignRequest::CopyFrom(const ResignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.ResignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResignRequest::IsInitialized() const {
  return true;
}

void ResignRequest::Swap(ResignRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResignRequest::InternalSwap(ResignRequest* other) {
  using std::swap;
  swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResignRequest::GetMetadata() const {
  protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResignResponse::InitAsDefaultInstance() {
  ::v3electionpb::_ResignResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
void ResignResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResignResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResignResponse::ResignResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_v3election_2eproto::InitDefaultsResignResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.ResignResponse)
}
ResignResponse::ResignResponse(const ResignResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.ResignResponse)
}

void ResignResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ResignResponse::~ResignResponse() {
  // @@protoc_insertion_point(destructor:v3electionpb.ResignResponse)
  SharedDtor();
}

void ResignResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ResignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResignResponse::descriptor() {
  ::protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResignResponse& ResignResponse::default_instance() {
  ::protobuf_v3election_2eproto::InitDefaultsResignResponse();
  return *internal_default_instance();
}

ResignResponse* ResignResponse::New(::google::protobuf::Arena* arena) const {
  ResignResponse* n = new ResignResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.ResignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ResignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.ResignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.ResignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.ResignResponse)
  return false;
#undef DO_
}

void ResignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.ResignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.ResignResponse)
}

::google::protobuf::uint8* ResignResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.ResignResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.ResignResponse)
  return target;
}

size_t ResignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.ResignResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResignResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.ResignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResignResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResignResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.ResignResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.ResignResponse)
    MergeFrom(*source);
  }
}

void ResignResponse::MergeFrom(const ResignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.ResignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ResignResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.ResignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResignResponse::CopyFrom(const ResignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.ResignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResignResponse::IsInitialized() const {
  return true;
}

void ResignResponse::Swap(ResignResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResignResponse::InternalSwap(ResignResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResignResponse::GetMetadata() const {
  protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProclaimRequest::InitAsDefaultInstance() {
  ::v3electionpb::_ProclaimRequest_default_instance_._instance.get_mutable()->leader_ = const_cast< ::v3electionpb::LeaderKey*>(
      ::v3electionpb::LeaderKey::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProclaimRequest::kLeaderFieldNumber;
const int ProclaimRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProclaimRequest::ProclaimRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_v3election_2eproto::InitDefaultsProclaimRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.ProclaimRequest)
}
ProclaimRequest::ProclaimRequest(const ProclaimRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_leader()) {
    leader_ = new ::v3electionpb::LeaderKey(*from.leader_);
  } else {
    leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.ProclaimRequest)
}

void ProclaimRequest::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_ = NULL;
  _cached_size_ = 0;
}

ProclaimRequest::~ProclaimRequest() {
  // @@protoc_insertion_point(destructor:v3electionpb.ProclaimRequest)
  SharedDtor();
}

void ProclaimRequest::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete leader_;
}

void ProclaimRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProclaimRequest::descriptor() {
  ::protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProclaimRequest& ProclaimRequest::default_instance() {
  ::protobuf_v3election_2eproto::InitDefaultsProclaimRequest();
  return *internal_default_instance();
}

ProclaimRequest* ProclaimRequest::New(::google::protobuf::Arena* arena) const {
  ProclaimRequest* n = new ProclaimRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProclaimRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.ProclaimRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  _internal_metadata_.Clear();
}

bool ProclaimRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.ProclaimRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .v3electionpb.LeaderKey leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.ProclaimRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.ProclaimRequest)
  return false;
#undef DO_
}

void ProclaimRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.ProclaimRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->leader_, output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.ProclaimRequest)
}

::google::protobuf::uint8* ProclaimRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.ProclaimRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->leader_, deterministic, target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.ProclaimRequest)
  return target;
}

size_t ProclaimRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.ProclaimRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .v3electionpb.LeaderKey leader = 1;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProclaimRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.ProclaimRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProclaimRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProclaimRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.ProclaimRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.ProclaimRequest)
    MergeFrom(*source);
  }
}

void ProclaimRequest::MergeFrom(const ProclaimRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.ProclaimRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_leader()) {
    mutable_leader()->::v3electionpb::LeaderKey::MergeFrom(from.leader());
  }
}

void ProclaimRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.ProclaimRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProclaimRequest::CopyFrom(const ProclaimRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.ProclaimRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProclaimRequest::IsInitialized() const {
  return true;
}

void ProclaimRequest::Swap(ProclaimRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProclaimRequest::InternalSwap(ProclaimRequest* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProclaimRequest::GetMetadata() const {
  protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProclaimResponse::InitAsDefaultInstance() {
  ::v3electionpb::_ProclaimResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
void ProclaimResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProclaimResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProclaimResponse::ProclaimResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_v3election_2eproto::InitDefaultsProclaimResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v3electionpb.ProclaimResponse)
}
ProclaimResponse::ProclaimResponse(const ProclaimResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:v3electionpb.ProclaimResponse)
}

void ProclaimResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ProclaimResponse::~ProclaimResponse() {
  // @@protoc_insertion_point(destructor:v3electionpb.ProclaimResponse)
  SharedDtor();
}

void ProclaimResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ProclaimResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProclaimResponse::descriptor() {
  ::protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProclaimResponse& ProclaimResponse::default_instance() {
  ::protobuf_v3election_2eproto::InitDefaultsProclaimResponse();
  return *internal_default_instance();
}

ProclaimResponse* ProclaimResponse::New(::google::protobuf::Arena* arena) const {
  ProclaimResponse* n = new ProclaimResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProclaimResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v3electionpb.ProclaimResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ProclaimResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v3electionpb.ProclaimResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v3electionpb.ProclaimResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v3electionpb.ProclaimResponse)
  return false;
#undef DO_
}

void ProclaimResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v3electionpb.ProclaimResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v3electionpb.ProclaimResponse)
}

::google::protobuf::uint8* ProclaimResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v3electionpb.ProclaimResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v3electionpb.ProclaimResponse)
  return target;
}

size_t ProclaimResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v3electionpb.ProclaimResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProclaimResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v3electionpb.ProclaimResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProclaimResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProclaimResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v3electionpb.ProclaimResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v3electionpb.ProclaimResponse)
    MergeFrom(*source);
  }
}

void ProclaimResponse::MergeFrom(const ProclaimResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v3electionpb.ProclaimResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ProclaimResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v3electionpb.ProclaimResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProclaimResponse::CopyFrom(const ProclaimResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v3electionpb.ProclaimResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProclaimResponse::IsInitialized() const {
  return true;
}

void ProclaimResponse::Swap(ProclaimResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProclaimResponse::InternalSwap(ProclaimResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProclaimResponse::GetMetadata() const {
  protobuf_v3election_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_v3election_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v3electionpb

// @@protoc_insertion_point(global_scope)
