// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v3lock.proto
#ifndef GRPC_v3lock_2eproto__INCLUDED
#define GRPC_v3lock_2eproto__INCLUDED

#include "v3lock.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace v3lockpb {

// The lock service exposes client-side locking facilities as a gRPC interface.
class Lock final {
 public:
  static constexpr char const* service_full_name() {
    return "v3lockpb.Lock";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lock acquires a distributed shared lock on a given named lock.
    // On success, it will return a unique key that exists so long as the
    // lock is held by the caller. This key can be used in conjunction with
    // transactions to safely ensure updates to etcd only occur while holding
    // lock ownership. The lock is held until Unlock is called on the key or the
    // lease associate with the owner expires.
    virtual ::grpc::Status Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::v3lockpb::LockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>> AsyncLock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>>(AsyncLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>> PrepareAsyncLock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>>(PrepareAsyncLockRaw(context, request, cq));
    }
    // Unlock takes a key returned by Lock and releases the hold on lock. The
    // next Lock caller waiting for the lock will then be woken up and given
    // ownership of the lock.
    virtual ::grpc::Status Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::v3lockpb::UnlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>> AsyncUnlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>>(AsyncUnlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>> PrepareAsyncUnlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>>(PrepareAsyncUnlockRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>* AsyncLockRaw(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>* PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>* AsyncUnlockRaw(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>* PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::v3lockpb::LockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>> AsyncLock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>>(AsyncLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>> PrepareAsyncLock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>>(PrepareAsyncLockRaw(context, request, cq));
    }
    ::grpc::Status Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::v3lockpb::UnlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>> AsyncUnlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>>(AsyncUnlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>> PrepareAsyncUnlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>>(PrepareAsyncUnlockRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>* AsyncLockRaw(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>* PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>* AsyncUnlockRaw(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>* PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Lock_;
    const ::grpc::internal::RpcMethod rpcmethod_Unlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lock acquires a distributed shared lock on a given named lock.
    // On success, it will return a unique key that exists so long as the
    // lock is held by the caller. This key can be used in conjunction with
    // transactions to safely ensure updates to etcd only occur while holding
    // lock ownership. The lock is held until Unlock is called on the key or the
    // lease associate with the owner expires.
    virtual ::grpc::Status Lock(::grpc::ServerContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response);
    // Unlock takes a key returned by Lock and releases the hold on lock. The
    // next Lock caller waiting for the lock will then be woken up and given
    // ownership of the lock.
    virtual ::grpc::Status Unlock(::grpc::ServerContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Lock() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLock(::grpc::ServerContext* context, ::v3lockpb::LockRequest* request, ::grpc::ServerAsyncResponseWriter< ::v3lockpb::LockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Unlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlock(::grpc::ServerContext* context, ::v3lockpb::UnlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::v3lockpb::UnlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Lock<WithAsyncMethod_Unlock<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Lock() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Unlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Lock() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::v3lockpb::LockRequest, ::v3lockpb::LockResponse>(std::bind(&WithStreamedUnaryMethod_Lock<BaseClass>::StreamedLock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Lock(::grpc::ServerContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v3lockpb::LockRequest,::v3lockpb::LockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Unlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::v3lockpb::UnlockRequest, ::v3lockpb::UnlockResponse>(std::bind(&WithStreamedUnaryMethod_Unlock<BaseClass>::StreamedUnlock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v3lockpb::UnlockRequest,::v3lockpb::UnlockResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Lock<WithStreamedUnaryMethod_Unlock<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Lock<WithStreamedUnaryMethod_Unlock<Service > > StreamedService;
};

}  // namespace v3lockpb


#endif  // GRPC_v3lock_2eproto__INCLUDED
