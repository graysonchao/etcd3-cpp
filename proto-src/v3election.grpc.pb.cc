// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v3election.proto

#include "v3election.pb.h"
#include "v3election.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace v3electionpb {

static const char* Election_method_names[] = {
  "/v3electionpb.Election/Campaign",
  "/v3electionpb.Election/Proclaim",
  "/v3electionpb.Election/Leader",
  "/v3electionpb.Election/Observe",
  "/v3electionpb.Election/Resign",
};

std::unique_ptr< Election::Stub> Election::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Election::Stub> stub(new Election::Stub(channel));
  return stub;
}

Election::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Campaign_(Election_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Proclaim_(Election_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Leader_(Election_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Observe_(Election_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Resign_(Election_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Election::Stub::Campaign(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::v3electionpb::CampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Campaign_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::v3electionpb::CampaignResponse>* Election::Stub::AsyncCampaignRaw(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::v3electionpb::CampaignResponse>::Create(channel_.get(), cq, rpcmethod_Campaign_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v3electionpb::CampaignResponse>* Election::Stub::PrepareAsyncCampaignRaw(::grpc::ClientContext* context, const ::v3electionpb::CampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::v3electionpb::CampaignResponse>::Create(channel_.get(), cq, rpcmethod_Campaign_, context, request, false);
}

::grpc::Status Election::Stub::Proclaim(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::v3electionpb::ProclaimResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Proclaim_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::v3electionpb::ProclaimResponse>* Election::Stub::AsyncProclaimRaw(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::v3electionpb::ProclaimResponse>::Create(channel_.get(), cq, rpcmethod_Proclaim_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v3electionpb::ProclaimResponse>* Election::Stub::PrepareAsyncProclaimRaw(::grpc::ClientContext* context, const ::v3electionpb::ProclaimRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::v3electionpb::ProclaimResponse>::Create(channel_.get(), cq, rpcmethod_Proclaim_, context, request, false);
}

::grpc::Status Election::Stub::Leader(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::v3electionpb::LeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Leader_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::v3electionpb::LeaderResponse>* Election::Stub::AsyncLeaderRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::v3electionpb::LeaderResponse>::Create(channel_.get(), cq, rpcmethod_Leader_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v3electionpb::LeaderResponse>* Election::Stub::PrepareAsyncLeaderRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::v3electionpb::LeaderResponse>::Create(channel_.get(), cq, rpcmethod_Leader_, context, request, false);
}

::grpc::ClientReader< ::v3electionpb::LeaderResponse>* Election::Stub::ObserveRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::v3electionpb::LeaderResponse>::Create(channel_.get(), rpcmethod_Observe_, context, request);
}

::grpc::ClientAsyncReader< ::v3electionpb::LeaderResponse>* Election::Stub::AsyncObserveRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::v3electionpb::LeaderResponse>::Create(channel_.get(), cq, rpcmethod_Observe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::v3electionpb::LeaderResponse>* Election::Stub::PrepareAsyncObserveRaw(::grpc::ClientContext* context, const ::v3electionpb::LeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::v3electionpb::LeaderResponse>::Create(channel_.get(), cq, rpcmethod_Observe_, context, request, false, nullptr);
}

::grpc::Status Election::Stub::Resign(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::v3electionpb::ResignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Resign_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::v3electionpb::ResignResponse>* Election::Stub::AsyncResignRaw(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::v3electionpb::ResignResponse>::Create(channel_.get(), cq, rpcmethod_Resign_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::v3electionpb::ResignResponse>* Election::Stub::PrepareAsyncResignRaw(::grpc::ClientContext* context, const ::v3electionpb::ResignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::v3electionpb::ResignResponse>::Create(channel_.get(), cq, rpcmethod_Resign_, context, request, false);
}

Election::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Election_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Election::Service, ::v3electionpb::CampaignRequest, ::v3electionpb::CampaignResponse>(
          std::mem_fn(&Election::Service::Campaign), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Election_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Election::Service, ::v3electionpb::ProclaimRequest, ::v3electionpb::ProclaimResponse>(
          std::mem_fn(&Election::Service::Proclaim), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Election_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Election::Service, ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>(
          std::mem_fn(&Election::Service::Leader), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Election_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Election::Service, ::v3electionpb::LeaderRequest, ::v3electionpb::LeaderResponse>(
          std::mem_fn(&Election::Service::Observe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Election_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Election::Service, ::v3electionpb::ResignRequest, ::v3electionpb::ResignResponse>(
          std::mem_fn(&Election::Service::Resign), this)));
}

Election::Service::~Service() {
}

::grpc::Status Election::Service::Campaign(::grpc::ServerContext* context, const ::v3electionpb::CampaignRequest* request, ::v3electionpb::CampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Election::Service::Proclaim(::grpc::ServerContext* context, const ::v3electionpb::ProclaimRequest* request, ::v3electionpb::ProclaimResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Election::Service::Leader(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::v3electionpb::LeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Election::Service::Observe(::grpc::ServerContext* context, const ::v3electionpb::LeaderRequest* request, ::grpc::ServerWriter< ::v3electionpb::LeaderResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Election::Service::Resign(::grpc::ServerContext* context, const ::v3electionpb::ResignRequest* request, ::v3electionpb::ResignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace v3electionpb

