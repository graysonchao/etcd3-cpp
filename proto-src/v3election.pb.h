// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v3election.proto

#ifndef PROTOBUF_v3election_2eproto__INCLUDED
#define PROTOBUF_v3election_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "rpc.pb.h"
#include "kv.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_v3election_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCampaignRequestImpl();
void InitDefaultsCampaignRequest();
void InitDefaultsCampaignResponseImpl();
void InitDefaultsCampaignResponse();
void InitDefaultsLeaderKeyImpl();
void InitDefaultsLeaderKey();
void InitDefaultsLeaderRequestImpl();
void InitDefaultsLeaderRequest();
void InitDefaultsLeaderResponseImpl();
void InitDefaultsLeaderResponse();
void InitDefaultsResignRequestImpl();
void InitDefaultsResignRequest();
void InitDefaultsResignResponseImpl();
void InitDefaultsResignResponse();
void InitDefaultsProclaimRequestImpl();
void InitDefaultsProclaimRequest();
void InitDefaultsProclaimResponseImpl();
void InitDefaultsProclaimResponse();
inline void InitDefaults() {
  InitDefaultsCampaignRequest();
  InitDefaultsCampaignResponse();
  InitDefaultsLeaderKey();
  InitDefaultsLeaderRequest();
  InitDefaultsLeaderResponse();
  InitDefaultsResignRequest();
  InitDefaultsResignResponse();
  InitDefaultsProclaimRequest();
  InitDefaultsProclaimResponse();
}
}  // namespace protobuf_v3election_2eproto
namespace v3electionpb {
class CampaignRequest;
class CampaignRequestDefaultTypeInternal;
extern CampaignRequestDefaultTypeInternal _CampaignRequest_default_instance_;
class CampaignResponse;
class CampaignResponseDefaultTypeInternal;
extern CampaignResponseDefaultTypeInternal _CampaignResponse_default_instance_;
class LeaderKey;
class LeaderKeyDefaultTypeInternal;
extern LeaderKeyDefaultTypeInternal _LeaderKey_default_instance_;
class LeaderRequest;
class LeaderRequestDefaultTypeInternal;
extern LeaderRequestDefaultTypeInternal _LeaderRequest_default_instance_;
class LeaderResponse;
class LeaderResponseDefaultTypeInternal;
extern LeaderResponseDefaultTypeInternal _LeaderResponse_default_instance_;
class ProclaimRequest;
class ProclaimRequestDefaultTypeInternal;
extern ProclaimRequestDefaultTypeInternal _ProclaimRequest_default_instance_;
class ProclaimResponse;
class ProclaimResponseDefaultTypeInternal;
extern ProclaimResponseDefaultTypeInternal _ProclaimResponse_default_instance_;
class ResignRequest;
class ResignRequestDefaultTypeInternal;
extern ResignRequestDefaultTypeInternal _ResignRequest_default_instance_;
class ResignResponse;
class ResignResponseDefaultTypeInternal;
extern ResignResponseDefaultTypeInternal _ResignResponse_default_instance_;
}  // namespace v3electionpb
namespace v3electionpb {

// ===================================================================

class CampaignRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v3electionpb.CampaignRequest) */ {
 public:
  CampaignRequest();
  virtual ~CampaignRequest();

  CampaignRequest(const CampaignRequest& from);

  inline CampaignRequest& operator=(const CampaignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CampaignRequest(CampaignRequest&& from) noexcept
    : CampaignRequest() {
    *this = ::std::move(from);
  }

  inline CampaignRequest& operator=(CampaignRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CampaignRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CampaignRequest* internal_default_instance() {
    return reinterpret_cast<const CampaignRequest*>(
               &_CampaignRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CampaignRequest* other);
  friend void swap(CampaignRequest& a, CampaignRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CampaignRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CampaignRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CampaignRequest& from);
  void MergeFrom(const CampaignRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CampaignRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // int64 lease = 2;
  void clear_lease();
  static const int kLeaseFieldNumber = 2;
  ::google::protobuf::int64 lease() const;
  void set_lease(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:v3electionpb.CampaignRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int64 lease_;
  mutable int _cached_size_;
  friend struct ::protobuf_v3election_2eproto::TableStruct;
  friend void ::protobuf_v3election_2eproto::InitDefaultsCampaignRequestImpl();
};
// -------------------------------------------------------------------

class CampaignResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v3electionpb.CampaignResponse) */ {
 public:
  CampaignResponse();
  virtual ~CampaignResponse();

  CampaignResponse(const CampaignResponse& from);

  inline CampaignResponse& operator=(const CampaignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CampaignResponse(CampaignResponse&& from) noexcept
    : CampaignResponse() {
    *this = ::std::move(from);
  }

  inline CampaignResponse& operator=(CampaignResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CampaignResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CampaignResponse* internal_default_instance() {
    return reinterpret_cast<const CampaignResponse*>(
               &_CampaignResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CampaignResponse* other);
  friend void swap(CampaignResponse& a, CampaignResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CampaignResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CampaignResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CampaignResponse& from);
  void MergeFrom(const CampaignResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CampaignResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);

  // .v3electionpb.LeaderKey leader = 2;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 2;
  const ::v3electionpb::LeaderKey& leader() const;
  ::v3electionpb::LeaderKey* release_leader();
  ::v3electionpb::LeaderKey* mutable_leader();
  void set_allocated_leader(::v3electionpb::LeaderKey* leader);

  // @@protoc_insertion_point(class_scope:v3electionpb.CampaignResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  ::v3electionpb::LeaderKey* leader_;
  mutable int _cached_size_;
  friend struct ::protobuf_v3election_2eproto::TableStruct;
  friend void ::protobuf_v3election_2eproto::InitDefaultsCampaignResponseImpl();
};
// -------------------------------------------------------------------

class LeaderKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v3electionpb.LeaderKey) */ {
 public:
  LeaderKey();
  virtual ~LeaderKey();

  LeaderKey(const LeaderKey& from);

  inline LeaderKey& operator=(const LeaderKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderKey(LeaderKey&& from) noexcept
    : LeaderKey() {
    *this = ::std::move(from);
  }

  inline LeaderKey& operator=(LeaderKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderKey* internal_default_instance() {
    return reinterpret_cast<const LeaderKey*>(
               &_LeaderKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LeaderKey* other);
  friend void swap(LeaderKey& a, LeaderKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderKey* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaderKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaderKey& from);
  void MergeFrom(const LeaderKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaderKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // int64 rev = 3;
  void clear_rev();
  static const int kRevFieldNumber = 3;
  ::google::protobuf::int64 rev() const;
  void set_rev(::google::protobuf::int64 value);

  // int64 lease = 4;
  void clear_lease();
  static const int kLeaseFieldNumber = 4;
  ::google::protobuf::int64 lease() const;
  void set_lease(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:v3electionpb.LeaderKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int64 rev_;
  ::google::protobuf::int64 lease_;
  mutable int _cached_size_;
  friend struct ::protobuf_v3election_2eproto::TableStruct;
  friend void ::protobuf_v3election_2eproto::InitDefaultsLeaderKeyImpl();
};
// -------------------------------------------------------------------

class LeaderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v3electionpb.LeaderRequest) */ {
 public:
  LeaderRequest();
  virtual ~LeaderRequest();

  LeaderRequest(const LeaderRequest& from);

  inline LeaderRequest& operator=(const LeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderRequest(LeaderRequest&& from) noexcept
    : LeaderRequest() {
    *this = ::std::move(from);
  }

  inline LeaderRequest& operator=(LeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderRequest* internal_default_instance() {
    return reinterpret_cast<const LeaderRequest*>(
               &_LeaderRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LeaderRequest* other);
  friend void swap(LeaderRequest& a, LeaderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaderRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaderRequest& from);
  void MergeFrom(const LeaderRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:v3electionpb.LeaderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_v3election_2eproto::TableStruct;
  friend void ::protobuf_v3election_2eproto::InitDefaultsLeaderRequestImpl();
};
// -------------------------------------------------------------------

class LeaderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v3electionpb.LeaderResponse) */ {
 public:
  LeaderResponse();
  virtual ~LeaderResponse();

  LeaderResponse(const LeaderResponse& from);

  inline LeaderResponse& operator=(const LeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderResponse(LeaderResponse&& from) noexcept
    : LeaderResponse() {
    *this = ::std::move(from);
  }

  inline LeaderResponse& operator=(LeaderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderResponse* internal_default_instance() {
    return reinterpret_cast<const LeaderResponse*>(
               &_LeaderResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LeaderResponse* other);
  friend void swap(LeaderResponse& a, LeaderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaderResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaderResponse& from);
  void MergeFrom(const LeaderResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);

  // .mvccpb.KeyValue kv = 2;
  bool has_kv() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  const ::mvccpb::KeyValue& kv() const;
  ::mvccpb::KeyValue* release_kv();
  ::mvccpb::KeyValue* mutable_kv();
  void set_allocated_kv(::mvccpb::KeyValue* kv);

  // @@protoc_insertion_point(class_scope:v3electionpb.LeaderResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  ::mvccpb::KeyValue* kv_;
  mutable int _cached_size_;
  friend struct ::protobuf_v3election_2eproto::TableStruct;
  friend void ::protobuf_v3election_2eproto::InitDefaultsLeaderResponseImpl();
};
// -------------------------------------------------------------------

class ResignRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v3electionpb.ResignRequest) */ {
 public:
  ResignRequest();
  virtual ~ResignRequest();

  ResignRequest(const ResignRequest& from);

  inline ResignRequest& operator=(const ResignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResignRequest(ResignRequest&& from) noexcept
    : ResignRequest() {
    *this = ::std::move(from);
  }

  inline ResignRequest& operator=(ResignRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResignRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResignRequest* internal_default_instance() {
    return reinterpret_cast<const ResignRequest*>(
               &_ResignRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ResignRequest* other);
  friend void swap(ResignRequest& a, ResignRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResignRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ResignRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResignRequest& from);
  void MergeFrom(const ResignRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResignRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .v3electionpb.LeaderKey leader = 1;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 1;
  const ::v3electionpb::LeaderKey& leader() const;
  ::v3electionpb::LeaderKey* release_leader();
  ::v3electionpb::LeaderKey* mutable_leader();
  void set_allocated_leader(::v3electionpb::LeaderKey* leader);

  // @@protoc_insertion_point(class_scope:v3electionpb.ResignRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::v3electionpb::LeaderKey* leader_;
  mutable int _cached_size_;
  friend struct ::protobuf_v3election_2eproto::TableStruct;
  friend void ::protobuf_v3election_2eproto::InitDefaultsResignRequestImpl();
};
// -------------------------------------------------------------------

class ResignResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v3electionpb.ResignResponse) */ {
 public:
  ResignResponse();
  virtual ~ResignResponse();

  ResignResponse(const ResignResponse& from);

  inline ResignResponse& operator=(const ResignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResignResponse(ResignResponse&& from) noexcept
    : ResignResponse() {
    *this = ::std::move(from);
  }

  inline ResignResponse& operator=(ResignResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResignResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResignResponse* internal_default_instance() {
    return reinterpret_cast<const ResignResponse*>(
               &_ResignResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ResignResponse* other);
  friend void swap(ResignResponse& a, ResignResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResignResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ResignResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResignResponse& from);
  void MergeFrom(const ResignResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResignResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:v3electionpb.ResignResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_v3election_2eproto::TableStruct;
  friend void ::protobuf_v3election_2eproto::InitDefaultsResignResponseImpl();
};
// -------------------------------------------------------------------

class ProclaimRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v3electionpb.ProclaimRequest) */ {
 public:
  ProclaimRequest();
  virtual ~ProclaimRequest();

  ProclaimRequest(const ProclaimRequest& from);

  inline ProclaimRequest& operator=(const ProclaimRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProclaimRequest(ProclaimRequest&& from) noexcept
    : ProclaimRequest() {
    *this = ::std::move(from);
  }

  inline ProclaimRequest& operator=(ProclaimRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProclaimRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProclaimRequest* internal_default_instance() {
    return reinterpret_cast<const ProclaimRequest*>(
               &_ProclaimRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ProclaimRequest* other);
  friend void swap(ProclaimRequest& a, ProclaimRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProclaimRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ProclaimRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProclaimRequest& from);
  void MergeFrom(const ProclaimRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProclaimRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .v3electionpb.LeaderKey leader = 1;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 1;
  const ::v3electionpb::LeaderKey& leader() const;
  ::v3electionpb::LeaderKey* release_leader();
  ::v3electionpb::LeaderKey* mutable_leader();
  void set_allocated_leader(::v3electionpb::LeaderKey* leader);

  // @@protoc_insertion_point(class_scope:v3electionpb.ProclaimRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::v3electionpb::LeaderKey* leader_;
  mutable int _cached_size_;
  friend struct ::protobuf_v3election_2eproto::TableStruct;
  friend void ::protobuf_v3election_2eproto::InitDefaultsProclaimRequestImpl();
};
// -------------------------------------------------------------------

class ProclaimResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:v3electionpb.ProclaimResponse) */ {
 public:
  ProclaimResponse();
  virtual ~ProclaimResponse();

  ProclaimResponse(const ProclaimResponse& from);

  inline ProclaimResponse& operator=(const ProclaimResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProclaimResponse(ProclaimResponse&& from) noexcept
    : ProclaimResponse() {
    *this = ::std::move(from);
  }

  inline ProclaimResponse& operator=(ProclaimResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProclaimResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProclaimResponse* internal_default_instance() {
    return reinterpret_cast<const ProclaimResponse*>(
               &_ProclaimResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ProclaimResponse* other);
  friend void swap(ProclaimResponse& a, ProclaimResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProclaimResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ProclaimResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProclaimResponse& from);
  void MergeFrom(const ProclaimResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProclaimResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:v3electionpb.ProclaimResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_v3election_2eproto::TableStruct;
  friend void ::protobuf_v3election_2eproto::InitDefaultsProclaimResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CampaignRequest

// bytes name = 1;
inline void CampaignRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CampaignRequest::name() const {
  // @@protoc_insertion_point(field_get:v3electionpb.CampaignRequest.name)
  return name_.GetNoArena();
}
inline void CampaignRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v3electionpb.CampaignRequest.name)
}
#if LANG_CXX11
inline void CampaignRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v3electionpb.CampaignRequest.name)
}
#endif
inline void CampaignRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v3electionpb.CampaignRequest.name)
}
inline void CampaignRequest::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v3electionpb.CampaignRequest.name)
}
inline ::std::string* CampaignRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:v3electionpb.CampaignRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CampaignRequest::release_name() {
  // @@protoc_insertion_point(field_release:v3electionpb.CampaignRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CampaignRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.CampaignRequest.name)
}

// int64 lease = 2;
inline void CampaignRequest::clear_lease() {
  lease_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CampaignRequest::lease() const {
  // @@protoc_insertion_point(field_get:v3electionpb.CampaignRequest.lease)
  return lease_;
}
inline void CampaignRequest::set_lease(::google::protobuf::int64 value) {
  
  lease_ = value;
  // @@protoc_insertion_point(field_set:v3electionpb.CampaignRequest.lease)
}

// bytes value = 3;
inline void CampaignRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CampaignRequest::value() const {
  // @@protoc_insertion_point(field_get:v3electionpb.CampaignRequest.value)
  return value_.GetNoArena();
}
inline void CampaignRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v3electionpb.CampaignRequest.value)
}
#if LANG_CXX11
inline void CampaignRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v3electionpb.CampaignRequest.value)
}
#endif
inline void CampaignRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v3electionpb.CampaignRequest.value)
}
inline void CampaignRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v3electionpb.CampaignRequest.value)
}
inline ::std::string* CampaignRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:v3electionpb.CampaignRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CampaignRequest::release_value() {
  // @@protoc_insertion_point(field_release:v3electionpb.CampaignRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CampaignRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.CampaignRequest.value)
}

// -------------------------------------------------------------------

// CampaignResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool CampaignResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::etcdserverpb::ResponseHeader& CampaignResponse::header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:v3electionpb.CampaignResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline ::etcdserverpb::ResponseHeader* CampaignResponse::release_header() {
  // @@protoc_insertion_point(field_release:v3electionpb.CampaignResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* CampaignResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:v3electionpb.CampaignResponse.header)
  return header_;
}
inline void CampaignResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.CampaignResponse.header)
}

// .v3electionpb.LeaderKey leader = 2;
inline bool CampaignResponse::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
inline void CampaignResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
}
inline const ::v3electionpb::LeaderKey& CampaignResponse::leader() const {
  const ::v3electionpb::LeaderKey* p = leader_;
  // @@protoc_insertion_point(field_get:v3electionpb.CampaignResponse.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::v3electionpb::LeaderKey*>(
      &::v3electionpb::_LeaderKey_default_instance_);
}
inline ::v3electionpb::LeaderKey* CampaignResponse::release_leader() {
  // @@protoc_insertion_point(field_release:v3electionpb.CampaignResponse.leader)
  
  ::v3electionpb::LeaderKey* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline ::v3electionpb::LeaderKey* CampaignResponse::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::v3electionpb::LeaderKey;
  }
  // @@protoc_insertion_point(field_mutable:v3electionpb.CampaignResponse.leader)
  return leader_;
}
inline void CampaignResponse::set_allocated_leader(::v3electionpb::LeaderKey* leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leader_;
  }
  if (leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.CampaignResponse.leader)
}

// -------------------------------------------------------------------

// LeaderKey

// bytes name = 1;
inline void LeaderKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderKey::name() const {
  // @@protoc_insertion_point(field_get:v3electionpb.LeaderKey.name)
  return name_.GetNoArena();
}
inline void LeaderKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v3electionpb.LeaderKey.name)
}
#if LANG_CXX11
inline void LeaderKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v3electionpb.LeaderKey.name)
}
#endif
inline void LeaderKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v3electionpb.LeaderKey.name)
}
inline void LeaderKey::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v3electionpb.LeaderKey.name)
}
inline ::std::string* LeaderKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:v3electionpb.LeaderKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderKey::release_name() {
  // @@protoc_insertion_point(field_release:v3electionpb.LeaderKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.LeaderKey.name)
}

// bytes key = 2;
inline void LeaderKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderKey::key() const {
  // @@protoc_insertion_point(field_get:v3electionpb.LeaderKey.key)
  return key_.GetNoArena();
}
inline void LeaderKey::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v3electionpb.LeaderKey.key)
}
#if LANG_CXX11
inline void LeaderKey::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v3electionpb.LeaderKey.key)
}
#endif
inline void LeaderKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v3electionpb.LeaderKey.key)
}
inline void LeaderKey::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v3electionpb.LeaderKey.key)
}
inline ::std::string* LeaderKey::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:v3electionpb.LeaderKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderKey::release_key() {
  // @@protoc_insertion_point(field_release:v3electionpb.LeaderKey.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.LeaderKey.key)
}

// int64 rev = 3;
inline void LeaderKey::clear_rev() {
  rev_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaderKey::rev() const {
  // @@protoc_insertion_point(field_get:v3electionpb.LeaderKey.rev)
  return rev_;
}
inline void LeaderKey::set_rev(::google::protobuf::int64 value) {
  
  rev_ = value;
  // @@protoc_insertion_point(field_set:v3electionpb.LeaderKey.rev)
}

// int64 lease = 4;
inline void LeaderKey::clear_lease() {
  lease_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaderKey::lease() const {
  // @@protoc_insertion_point(field_get:v3electionpb.LeaderKey.lease)
  return lease_;
}
inline void LeaderKey::set_lease(::google::protobuf::int64 value) {
  
  lease_ = value;
  // @@protoc_insertion_point(field_set:v3electionpb.LeaderKey.lease)
}

// -------------------------------------------------------------------

// LeaderRequest

// bytes name = 1;
inline void LeaderRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaderRequest::name() const {
  // @@protoc_insertion_point(field_get:v3electionpb.LeaderRequest.name)
  return name_.GetNoArena();
}
inline void LeaderRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v3electionpb.LeaderRequest.name)
}
#if LANG_CXX11
inline void LeaderRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v3electionpb.LeaderRequest.name)
}
#endif
inline void LeaderRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v3electionpb.LeaderRequest.name)
}
inline void LeaderRequest::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v3electionpb.LeaderRequest.name)
}
inline ::std::string* LeaderRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:v3electionpb.LeaderRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderRequest::release_name() {
  // @@protoc_insertion_point(field_release:v3electionpb.LeaderRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.LeaderRequest.name)
}

// -------------------------------------------------------------------

// LeaderResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool LeaderResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::etcdserverpb::ResponseHeader& LeaderResponse::header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:v3electionpb.LeaderResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline ::etcdserverpb::ResponseHeader* LeaderResponse::release_header() {
  // @@protoc_insertion_point(field_release:v3electionpb.LeaderResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* LeaderResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:v3electionpb.LeaderResponse.header)
  return header_;
}
inline void LeaderResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.LeaderResponse.header)
}

// .mvccpb.KeyValue kv = 2;
inline bool LeaderResponse::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
inline const ::mvccpb::KeyValue& LeaderResponse::kv() const {
  const ::mvccpb::KeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:v3electionpb.LeaderResponse.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::mvccpb::KeyValue*>(
      &::mvccpb::_KeyValue_default_instance_);
}
inline ::mvccpb::KeyValue* LeaderResponse::release_kv() {
  // @@protoc_insertion_point(field_release:v3electionpb.LeaderResponse.kv)
  
  ::mvccpb::KeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline ::mvccpb::KeyValue* LeaderResponse::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::mvccpb::KeyValue;
  }
  // @@protoc_insertion_point(field_mutable:v3electionpb.LeaderResponse.kv)
  return kv_;
}
inline void LeaderResponse::set_allocated_kv(::mvccpb::KeyValue* kv) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kv_);
  }
  if (kv) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kv = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kv, submessage_arena);
    }
    
  } else {
    
  }
  kv_ = kv;
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.LeaderResponse.kv)
}

// -------------------------------------------------------------------

// ResignRequest

// .v3electionpb.LeaderKey leader = 1;
inline bool ResignRequest::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
inline void ResignRequest::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
}
inline const ::v3electionpb::LeaderKey& ResignRequest::leader() const {
  const ::v3electionpb::LeaderKey* p = leader_;
  // @@protoc_insertion_point(field_get:v3electionpb.ResignRequest.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::v3electionpb::LeaderKey*>(
      &::v3electionpb::_LeaderKey_default_instance_);
}
inline ::v3electionpb::LeaderKey* ResignRequest::release_leader() {
  // @@protoc_insertion_point(field_release:v3electionpb.ResignRequest.leader)
  
  ::v3electionpb::LeaderKey* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline ::v3electionpb::LeaderKey* ResignRequest::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::v3electionpb::LeaderKey;
  }
  // @@protoc_insertion_point(field_mutable:v3electionpb.ResignRequest.leader)
  return leader_;
}
inline void ResignRequest::set_allocated_leader(::v3electionpb::LeaderKey* leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leader_;
  }
  if (leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.ResignRequest.leader)
}

// -------------------------------------------------------------------

// ResignResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool ResignResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::etcdserverpb::ResponseHeader& ResignResponse::header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:v3electionpb.ResignResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline ::etcdserverpb::ResponseHeader* ResignResponse::release_header() {
  // @@protoc_insertion_point(field_release:v3electionpb.ResignResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* ResignResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:v3electionpb.ResignResponse.header)
  return header_;
}
inline void ResignResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.ResignResponse.header)
}

// -------------------------------------------------------------------

// ProclaimRequest

// .v3electionpb.LeaderKey leader = 1;
inline bool ProclaimRequest::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
inline void ProclaimRequest::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
}
inline const ::v3electionpb::LeaderKey& ProclaimRequest::leader() const {
  const ::v3electionpb::LeaderKey* p = leader_;
  // @@protoc_insertion_point(field_get:v3electionpb.ProclaimRequest.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::v3electionpb::LeaderKey*>(
      &::v3electionpb::_LeaderKey_default_instance_);
}
inline ::v3electionpb::LeaderKey* ProclaimRequest::release_leader() {
  // @@protoc_insertion_point(field_release:v3electionpb.ProclaimRequest.leader)
  
  ::v3electionpb::LeaderKey* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline ::v3electionpb::LeaderKey* ProclaimRequest::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::v3electionpb::LeaderKey;
  }
  // @@protoc_insertion_point(field_mutable:v3electionpb.ProclaimRequest.leader)
  return leader_;
}
inline void ProclaimRequest::set_allocated_leader(::v3electionpb::LeaderKey* leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leader_;
  }
  if (leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.ProclaimRequest.leader)
}

// bytes value = 2;
inline void ProclaimRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProclaimRequest::value() const {
  // @@protoc_insertion_point(field_get:v3electionpb.ProclaimRequest.value)
  return value_.GetNoArena();
}
inline void ProclaimRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:v3electionpb.ProclaimRequest.value)
}
#if LANG_CXX11
inline void ProclaimRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v3electionpb.ProclaimRequest.value)
}
#endif
inline void ProclaimRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v3electionpb.ProclaimRequest.value)
}
inline void ProclaimRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v3electionpb.ProclaimRequest.value)
}
inline ::std::string* ProclaimRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:v3electionpb.ProclaimRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProclaimRequest::release_value() {
  // @@protoc_insertion_point(field_release:v3electionpb.ProclaimRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProclaimRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.ProclaimRequest.value)
}

// -------------------------------------------------------------------

// ProclaimResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool ProclaimResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::etcdserverpb::ResponseHeader& ProclaimResponse::header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:v3electionpb.ProclaimResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline ::etcdserverpb::ResponseHeader* ProclaimResponse::release_header() {
  // @@protoc_insertion_point(field_release:v3electionpb.ProclaimResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* ProclaimResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::etcdserverpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:v3electionpb.ProclaimResponse.header)
  return header_;
}
inline void ProclaimResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:v3electionpb.ProclaimResponse.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3electionpb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_v3election_2eproto__INCLUDED
